{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","currentCount","setCurrentCount","contract","setContract","mining","setMining","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","handleNFTMint","getTotalNFTsMintedSoFar","_hex","parseInt","useEffect","chainId","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12a2d8bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, {useEffect, useState} from 'react';\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport {ethers} from \"ethers\"\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport \"./tailwind.css\"\n\n\n// Constants\nconst TWITTER_HANDLE = 'Prince_RedEyes';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// const OPENSEA_LINK = '';\n// const TOTAL_MINT_COUNT = 50;\n\n  // const CONTRACT_ADDRESS=\"0x0314Ec6b8098483A68c911c7aD3D5AdDa0955D9c\" ;\n    const CONTRACT_ADDRESS=\"0x622816de817e7eAbEb3c4467B532c17546399d5e\" ;\nconst App = () => {\n  // Render Methods\n  const [currentAccount, setCurrentAccount] = useState(\"\")\n  const [currentCount, setCurrentCount] = useState(0);\n  const [contract, setContract] = useState(null)\n  const [mining, setMining] = useState(false)\n\n\n\n  const checkIfWalletIsConnected = async () =>{\n  const {ethereum} = window;\n\n \n  if(!ethereum){\n    console.log(`Make Sure you have metamask !`)\n    return\n  }\n  else{\n    console.log(`We have the ethereum object ${ethereum}`)\n  }\n\n  const accounts = await ethereum.request({method:\"eth_accounts\"})\n\n  if (accounts.length !==0){\n    const account = accounts[0]\n    console.log(\"Found an authorized account:\", account)\n    setCurrentAccount(account)\n    setEventListener()\n  }\n  else{\n    console.log(\"No authoried accounts found\")\n  }\n\n} \n\nconst connectWallet = async () =>{\n  try{\n    const {ethereum} = window;\n\n    if(!ethereum){\n      alert(\"Get MetaMask!\")\n      return\n    }\n    const accounts = await ethereum.request({method: \"eth_requestAccounts\"})\n\n    console.log(\"Connected\", accounts[0])\n    setCurrentAccount(accounts[0])\n\n    setEventListener()\n  }\n  catch(error){\n    console.log(error)\n  }\n}\nconst setEventListener = async ()=>{\n  try{\n    const {ethereum} = window\n\n    if(ethereum){\n      const provider = new ethers.providers.Web3Provider(ethereum)\n      const signer = provider.getSigner()\n\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n    connectedContract.on(\"NewEpicNFtMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n    }\n  }\n  catch(error){\n    console.log(error)\n  }\n}\nconst askContractToMintNft = async ()=>{\n try{ const {ethereum} =window;\n  if(ethereum){\n    const provider  = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner()\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer)\n\n    console.log(\"Going to pop wallet now to pay Gas fee ...\")\n    let nftTxn = await connectedContract.makeAnEpicNFT();\n\n    console.log(\"'mining ... Please wait.'\")\n\n    await nftTxn.wait();\n\n    console.log(`Mined, see traansaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`)\n    \n  }\n  else {\n    console.log(\"Ethereum object doesn't exist\")\n  }}\n  catch(error){\n    console.log(error)\n  }\n}\n\nconst handleNFTMint = async()=>{\ntry{ \n  setMining(true)\n  await askContractToMintNft()\nconst {_hex} = await contract.getTotalNFTsMintedSoFar()\n  setCurrentCount(parseInt(_hex,16))\n   setMining(false)\n  }\ncatch(e){\n  console.log(e)\n}\n}\n const renderNotConnectedContainer = () => (\n    <button \n    onClick={connectWallet}\n    className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n  useEffect(()=>{\n    ( async () =>{  try{\n      checkIfWalletIsConnected()\n      const {ethereum} = window\n      \n      const chainId = await ethereum.request({method:\"eth_chainId\"})\n    console.log(\"Connected to Chain\",chainId)\n      const rinckebyChainId = \"0x4\"\n      if(chainId !== rinckebyChainId){\n      alert(\"You're on the wrong network Please connect to The Rinkeby Test Network!\")\n    }\n\n    if(ethereum){\n      const provider = new ethers.providers.Web3Provider(ethereum)\n      const signer = provider.getSigner()\n\n      const connectedContract = await new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n      setContract(connectedContract)\n      console.log(connectedContract)\n      // setCurrentCount(connectedContract.getTotalNFTsMintedSoFar())\n      const {_hex}= await connectedContract.getTotalNFTsMintedSoFar()\n\n      setCurrentCount(parseInt(_hex,16))\n      console.log(\"current count:\",currentCount)\n    }\n    }\n    catch(e){\n      console.log(e)\n    }}\n)()  },[])\n\n  return (\n    <div className=\"App relative\">\n   {mining &&   <div className=\"w-screen h-screen absolute flex flex-col bg-opacity-20 bg-red-200 items-center  gap-8 justify-center\">\n      <div className=\"w-20 h-20 bg-gray-100 animate-spin\"></div>\n      <p className=\"text-center font-sans text-lg pl-2 text-red-200 font-white\">Mining, Please wait...</p>\n      </div>}\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Prince's NFT Collection</p>\n          <p className=\"sub-text\">{currentCount} / 50 NFT's Minted</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ?renderNotConnectedContainer(): <button className=\"bg-green-300 w-20 h-auto p-2 rounded-sm mt-6 hover:text-white hover:bg-green-500\" onClick ={handleNFTMint}>\n          Mint NFT\n          </button>}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\"\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}